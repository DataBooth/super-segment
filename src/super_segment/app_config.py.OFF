from pathlib import Path
from pprint import pprint
import toml
from loguru import logger

def find_project_root(marker="pyproject.toml", start_dir=None):
    """
    Recursively search parent directories for the project root marker file.
    If start_dir is provided, start the search from there.
    """
    if start_dir is not None:
        current = Path(start_dir).resolve()
    else:
        current = Path(__file__).resolve().parent
    while current != current.parent:
        logger.debug(f"[find_project_root] Searching: {current}")
        if (current / marker).exists():
            return current
        current = current.parent
    raise FileNotFoundError(f"Could not find project root (missing {marker})")


class AppConfig:
    def __init__(self, main_path="app_config.toml", conf_dir="conf", project_root=None):
        # If conf_dir is absolute, use it; otherwise, anchor to project root
        conf_dir_path = Path(conf_dir)
        if not conf_dir_path.is_absolute():
            root = find_project_root(start_dir=project_root)
            logger.debug(f"[AppConfig] Using project root: {root}") 
            self.conf_dir = root / conf_dir_path
        else:
            self.conf_dir = conf_dir_path

        main_path = Path(main_path)
        if not main_path.is_absolute():
            self.main_path = self.conf_dir / main_path
        else:
            self.main_path = main_path

        self.config = self._load_toml(self.main_path)
        self.sub_configs = {}
        self._load_sub_configs()

    def _load_toml(self, path):
        path = Path(path)
        if not path.exists():
            raise FileNotFoundError(f"Config file not found: {path.resolve()}")
        return toml.load(path)

    def _load_sub_configs(self):
        sub_files = self.config.get("sub_config", {}).get("files", [])
        for fname in sub_files:
            fpath = (
                self.conf_dir / fname if not Path(fname).is_absolute() else Path(fname)
            )
            key = Path(fname).stem
            self.sub_configs[key] = self._load_toml(fpath)

    def get(self, *keys, sub_name=None, default=None, verbose=False):
        """
        Get a value from the main config (if sub_name=None) or a sub-config.
        If verbose=True, echo where the parameter was sourced from.
        Usage:
            config.get("app", "title", verbose=True)  # from main config
            config.get("sidebar", "age", "min", sub_name="ui", verbose=True)  # from ui.toml
        """
        conf = self.config if sub_name is None else self.sub_configs.get(sub_name, {})
        source = self.main_path if sub_name is None else self.sub_configs.get(sub_name, None)
        found = True
        for k in keys:
            if isinstance(conf, dict) and k in conf:
                conf = conf[k]
            else:
                found = False
                break
        if verbose:
            key_path = " -> ".join(keys)
            if found:
                if sub_name is None:
                    print(f"[AppConfig] '{key_path}' found in MAIN config ({self.main_path})")
                else:
                    print(f"[AppConfig] '{key_path}' found in SUB-CONFIG '{sub_name}' ({self.conf_dir / (sub_name + '.toml')})")
            else:
                print(f"[AppConfig] '{key_path}' NOT FOUND in {'MAIN' if sub_name is None else 'SUB-CONFIG ' + sub_name}; using default: {default!r}")
        return conf if found else default


    def as_dict(self):
        out = dict(self.config)
        for k, v in self.sub_configs.items():
            out[k] = v
        return out

    def debug_print(self):
        pprint(self.as_dict())

# Example usage:
if __name__ == "__main__":
    config = AppConfig()
    config.debug_print()
    print()
    print(f"App title: {config.get('app', 'title', verbose=True)}")
    print("-" * 60)
    print(config.get("ui", "sidebar", "age", "min", verbose=True))
    pprint(config.sub_configs["ui"]["sidebar"])
